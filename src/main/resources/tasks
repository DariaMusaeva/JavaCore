1   String text = "Я люблю программировать на java.Java лучший язык программирования, а так же один из самый популярных [JaVa]";

    String[] words = text.toLowerCase().split("[^a-zA-Zа-яА-ЯёЁ]+");
    List<String> allWords = Arrays.asList(words);
    Map<String, Integer> wordCount = new TreeMap<>();
    for (String word : allWords) {
        wordCount.put(word, wordCount.getOrDefault(word, 0) + 1);
    }
    System.out.println(allWords.size());

2   List<Integer> list = List.of(-1, -3, -14, -5, -7);
    List<Integer> list1 = list.stream()
            .map(x -> Math.abs(x))
            .collect(Collectors.toList());

    System.out.println(list);
    System.out.println(list1);

3   List<Integer> list = List.of(1, 3, 2, 4);
    List<Integer> list1 = list.stream()
            .filter(x -> x % 2 == 0)
            .map(x -> x * 100)
            .collect(Collectors.toList());

    System.out.println(list1);


4   String str = "Никогда не ошибается тот, кто ничего не делает";

    List<Character> list = new ArrayList<>();
    for (char c : str.toCharArray()) {
        list.add(c);
    }

    Collections.reverse(list);
    System.out.println(list);

    StringBuilder builder = new StringBuilder(list.size());
    for (Character c : list) {
        builder.append(c);
    }
    System.out.println(builder);

5. Создать массив типа String размером 3х6.
   И записать в него значения:
   a1  a2  a3  a4  a5  a6
   b1  b2  b3  b4  b5  b6
   c1  c2   c3  c4  c5  c6
   Распечатать массив.

           char symbol = 'a';
           String[][] str = new String[3][6];
           for (int i = 0; i < str.length; i++) {
               for (int j = 0; j < str[0].length; j++) {
                   str[i][j] = symbol + "" + (j + 1);
                   System.out.print(str[i][j] + " ");
               }
               symbol++;
               System.out.println();

6. Создать двумерный массив типа char размером 4х2.
   Записать в него значения с помощью блока для инициализации.
   Распечатать значения массива.
           char[][] arr = {
                   {'1', '2'},
                   {'3', '4'},
                   {'5', '6'},
                   {'7', '8'}
           };
           for (char[] arr1 : arr) {
               for (char element : arr1) {
                   System.out.print(element + " ");
               }
               System.out.println();
           }

7. Создать двумерный массив 5х8 типа int и инициализировать его с помощью блока для инициализации.
   Найти максимальное и минимальное значение в каждой "строке" и записать эти значения в двухмерный массив 5х2.
   Распечатать массив, содержащий максимальное и минимальное значение.
       int[][] arr = {
                   {1, 2, 3, 4, 5, 6, 7, 8},
                   {9, 10, 11, 12, 13, 14, 15, 16},
                   {17, 18, 19, 20, 21, 22, 23, 24},
                   {25, 26, 27, 28, 29, 30, 31, 32},
                   {33, 34, 35, 36, 37, 38, 39, 40}
           };
           int[][] temp = new int[5][2];

           for (int i = 0; i < arr.length; i++) {
               int max = 1;
               int min = 40;
               for (int j = 0; j < arr[i].length; j++) {
                   if (arr[i][j] > max) {
                       max = arr[i][j];
                   }
                   if (arr[i][j] < min) {
                       min = arr[i][j];
                   }
               }
               temp[i][0] = max;
               temp[i][1] = min;
           }

           for (int i = 0; i < temp.length; i++) {
               for (int j = 0; j < temp[i].length; j++) {
                   System.out.print(temp[i][j] + " ");
               }
               System.out.println();
           }

8.  Напишите метод проверки валидности открытия/закрытия скобок.
       Пример: validate("({[()}])"). Результат true
            public static boolean validate(String s) {
                Stack<Character> stack = new Stack<>();

                for (char c : s.toCharArray()) {
                    if (c =='(' || c == '{' || c == '[') {
                        stack.push(c); // помещаем в стек открывающую скобку
                    } else if (c == ')' && !stack.isEmpty() && stack.peek() == '(')  {
                        stack.pop(); // если с - закрывающая скобка и на вершине стека соответствующая открывающая скобка, удаляем её из стека
                    } else if (c == ']' && !stack.isEmpty() && stack.peek() == '[') {
                        stack.pop();
                    } else if (c == '}' && !stack.isEmpty() && stack.peek() == '{') {
                        stack.pop();
                    } else {
                        return false;
                    }
                    System.out.println(stack);
                }
                return stack.isEmpty();
            }

9. Удалить дубликаты из сортированного списка с помощью коллекций
    int[] sortedList = {1, 2, 2, 3, 3, 4, 5, 5, 5, 5, 6, 7, 8, 8, 9, 9, 10};
        List<Integer> listWithDuplicates = new ArrayList<>();
        for (int num : sortedList) {
            listWithDuplicates.add(num);
        }

        List<Integer> listWithoutDuplicates = new ArrayList<>(new LinkedHashSet<>(listWithDuplicates));

        или

        public static HashSet<Integer> duplicate(int[] arr) {
                HashSet<Integer> set = new HashSet<>();
                for (Integer num:arr) {
                    set.add(num);
                }
                return set;

        вывести дублирующие элементы в виде списка
         Set<Integer> listWithNoDuplicates = new HashSet<>();
                Set<Integer> tempSet = new HashSet<>();

                for (int num : listWithDuplicates) {
                    if (!tempSet.add(num)) { // если num уже есть в tempSet ->
                        listWithNoDuplicates.add(num); // добавляем num в список дубликатов
                    }
                }

10. Проверить соответствуют ли элементы массива шаблону e-mail с помощью регулярных выражений
        String[] emailList = { "test@mail.ru", "123-kkdf@gmail.com", "123@343.com", "123123@yandex.com", "test.test@gmail.com", "sdfsdf@gmail." }
         String emailPattern = "^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}$";

                for (String email : emailList) {
                    boolean validEmail = Pattern.matches(emailPattern, email);
                    System.out.println(email + " " + validEmail);
                }

11. Дайте пример кода, который сортирует список строк с использованием коллекции.
         String[] array = {"a", "d", "b", "e", "c"};

                List<String> list = new ArrayList<>();
                for(String str : array) {
                    list.add(str);
                }
                Collections.sort(list);
                System.out.println(list);

12. Напишите функцию, которая переворачивает число (порядок цифр в нем изменяет на противоположный, инвертирует).
    чтобы проверить на палидром - сделать метод boolean и сравнить с оригинальным числом
         public static int reverseNumber(int number) {
                int reversed = 0; // создаем переменную для хранения перевернутого числа
                while (number != 0) { // пока число не равно 0
                    int digit = number % 10; // получаем последнюю цифру числа
                    reversed = reversed * 10 + digit; // увеличиваем на 1 разряд и прибавляем последнюю цифру
                    number /= 10; // уменьшаем число на один разряд, удаляя последнюю цифру
                }
                return reversed; // возвращаем перевернутое число
            }
13. поменять значения переменных
с использованием третьей переменной            без использования третьей переменной
        temp = a;                                   a = a + b;
        a = b;                                      b = a - b;
        b = temp;                                   a = a - b;

14. проверить, что число простое (делится только на 1 и на само себя без остатка)
       boolean isPrime = true;
            int a = 8;
            if (a <= 1) {
                isPrime = false;
            } else {
                for (int i = 2; i < Math.sqrt(a); i++) {
                    if (a % i == 0) {
                        isPrime = false;
                        break;
                    }
                }
            }
            if (isPrime) {
                System.out.println("yes");
            } else {
                System.out.println("no");
            }

15. найти второе по величине значение в массиве
      int max = arr[0];
            int premax = arr[0];

            for (int i = 0; i < arr.length; i++) {
              if (arr[i] > max) {
                  premax = max;
                  max = arr[i];
              } else if (arr[i] > premax && arr[i] != max) {
                  premax = arr[i];
              }
            }
            return premax;
